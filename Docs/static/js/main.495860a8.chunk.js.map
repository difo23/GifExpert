{"version":3,"sources":["components/GifExpertApp/AddElement.js","helpers/getGifs.js","config/api/constant.js","components/GifExpertApp/GifGrid.js","hooks/useFetchGifs.js","components/GifExpertApp/index.js","App.js","serviceWorker.js","index.js"],"names":["AddElement","handleAdd","useState","element","setElement","onSubmit","e","preventDefault","trim","length","category","type","value","onChange","target","getGifs","a","url","encodeURI","fetch","resp","json","data","imagenes","map","img","id","images","downsized_medium","title","Gifgrid","loading","state","setState","useEffect","setTimeout","then","imgs","useFetchGifs","LinearProgress","className","key","src","alt","GifExpertApp","props","setCategory","GifGrid","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"yOAgCeA,EA9BI,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UAAgB,EACLC,mBAAS,IADJ,mBAC7BC,EAD6B,KACpBC,EADoB,KAiBrC,OACC,0BAAMC,SAXa,SAACC,GACpBA,EAAEC,iBAEEJ,EAAQK,OAAOC,OAAS,GAC3BR,GAAU,SAACS,GAAD,4BAAmBA,GAAnB,CAA6BP,OAGxCC,EAAW,MAKV,6BACC,2BAAOO,KAAK,OAAOC,MAAOT,EAASU,SAjBjB,SAACP,GACrBF,EAAWE,EAAEQ,OAAOF,a,wBCJTG,EAAO,uCAAG,WAAOL,GAAP,uBAAAM,EAAA,6DACV,EAENC,EAHgB,iDAGgCC,UAAUR,GAH1C,kBACV,EADU,oBCFR,oCDEQ,SAKHS,MAAMF,GALH,cAKhBG,EALgB,gBAMCA,EAAKC,OANN,uBAMdC,EANc,EAMdA,KAEFC,EAAWD,EAAKE,KAAI,SAACC,GAC1B,MAAO,CACNC,GAAID,EAAIC,GACRT,IAAKQ,EAAIE,OAAOC,iBAAiBX,IACjCY,MAAOJ,EAAII,UAZS,kBAgBfN,GAhBe,4CAAH,sD,QE6BLO,EAzBC,SAAC,GAAkB,IAAhBpB,EAAe,EAAfA,SAAe,ECHN,SAACA,GAAc,IAAD,EACbR,mBAAS,CACpCoB,KAAM,GACNS,SAAS,IAH+B,mBACjCC,EADiC,KAC1BC,EAD0B,KAsBzC,OAhBAC,qBACC,WAGCC,YAAW,WACVpB,EAAQL,GAAU0B,MAAK,SAACC,GACvBJ,EAAS,CACRX,KAAMe,EACNN,SAAS,SAGT,OAEJ,CAAErB,IAGIsB,EDlBmBM,CAAa5B,GAA/BY,EADyB,EACzBA,KAAMS,EADmB,EACnBA,QAEd,OACC,6BACC,4BAAKrB,GACJqB,GAAW,kBAACQ,EAAA,EAAD,MACZ,yBAAKC,UAAU,aACblB,EAAKE,KAAI,YAAyB,IAAtBE,EAAqB,EAArBA,GAAIT,EAAiB,EAAjBA,IAAKY,EAAY,EAAZA,MACrB,OACC,yBAAKY,IAAKf,EAAIc,UAAU,QACvB,4BAAKX,GACL,yBAAKa,IAAKzB,EAAK0B,IAAKd,WECZe,EAfM,SAACC,GAAW,IAAD,EACG3C,mBAAS,IADZ,mBACvBQ,EADuB,KACboC,EADa,KAG/B,OACC,6BACC,6CACA,6BACA,kBAAC,EAAD,CAAY7C,UAAW6C,IACvB,6BAAMpC,EAASc,KAAI,SAACrB,GAAD,OAAa,kBAAC4C,EAAD,CAASN,IAAKtC,EAASO,SAAUP,UCDrD6C,MARf,WACE,OACE,yBAAKR,UAAU,OACd,kBAAC,EAAD,QCMeS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.495860a8.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nconst AddElement = ({ handleAdd }) => {\n\tconst [ element, setElement ] = useState('');\n\n\tconst handleChange = (e) => {\n\t\tsetElement(e.target.value);\n\t};\n\n\tconst handleSumit = (e) => {\n\t\te.preventDefault();\n\n\t\tif (element.trim().length > 2) {\n\t\t\thandleAdd((category) => [ ...category, element ]);\n\t\t}\n\n\t\tsetElement('');\n\t};\n\n\treturn (\n\t\t<form onSubmit={handleSumit}>\n\t\t\t<div>\n\t\t\t\t<input type=\"text\" value={element} onChange={handleChange} />\n\t\t\t</div>\n\t\t</form>\n\t);\n};\n\nAddElement.propTypes = {\n\thandleAdd: PropTypes.func.isRequired\n};\n\nexport default AddElement;\n","import { APIKEY } from '../config/api/constant';\n\nexport const getGifs = async (category) => {\n\tlet limit = 5;\n\n\tconst url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=${limit}&api_key=${APIKEY}`;\n\n\tconst resp = await fetch(url);\n\tconst { data } = await resp.json();\n\n\tconst imagenes = data.map((img) => {\n\t\treturn {\n\t\t\tid: img.id,\n\t\t\turl: img.images.downsized_medium.url,\n\t\t\ttitle: img.title\n\t\t};\n\t});\n\n\treturn imagenes;\n};\n","const APIKEY = 'RTpKYKtm0knWPwm8BaGupekwgNxQSF0I';\n\nexport { APIKEY };\n","import React /*,{ useState, useEffect }*/ from 'react';\nimport PropTypes from 'prop-types';\nimport { useFetchGifs } from '../../hooks/useFetchGifs';\nimport { LinearProgress } from '@material-ui/core';\n// import { getGifs } from '../../helpers/getGifs';\n\nconst Gifgrid = ({ category }) => {\n\tconst { data, loading } = useFetchGifs(category);\n\n\treturn (\n\t\t<div>\n\t\t\t<h3>{category}</h3>\n\t\t\t{loading && <LinearProgress />}\n\t\t\t<div className=\"card-grid\">\n\t\t\t\t{data.map(({ id, url, title }) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div key={id} className=\"card\">\n\t\t\t\t\t\t\t<h4>{title}</h4>\n\t\t\t\t\t\t\t<img src={url} alt={title} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nGifgrid.propTypes = {\n\tcategory: PropTypes.string\n};\n\nexport default Gifgrid;\n","import { useState, useEffect } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = (category) => {\n\tconst [ state, setState ] = useState({\n\t\tdata: [],\n\t\tloading: true\n\t});\n\n\tuseEffect(\n\t\t() => {\n\t\t\t//Fetch API\n\t\t\t//the timeout is only for test\n\t\t\tsetTimeout(() => {\n\t\t\t\tgetGifs(category).then((imgs) => {\n\t\t\t\t\tsetState({\n\t\t\t\t\t\tdata: imgs,\n\t\t\t\t\t\tloading: false\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}, 3000);\n\t\t},\n\t\t[ category ]\n\t);\n\n\treturn state;\n};\n","import React, { /*PropTypes,*/ useState } from 'react';\nimport AddElement from './AddElement';\nimport GifGrid from './GifGrid';\n\nconst GifExpertApp = (props) => {\n\tconst [ category, setCategory ] = useState([]);\n\n\treturn (\n\t\t<div>\n\t\t\t<h2> GifExpertApp</h2>\n\t\t\t<hr />\n\t\t\t<AddElement handleAdd={setCategory} />\n\t\t\t<div>{category.map((element) => <GifGrid key={element} category={element} />)}</div>\n\t\t</div>\n\t);\n};\n\n//GifExpertApp.propTypes = {};\n\nexport default GifExpertApp;\n","import React from 'react';\nimport GifExpertApp from './components/GifExpertApp';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <GifExpertApp/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}